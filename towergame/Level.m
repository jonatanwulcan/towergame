//
//  Level.m
//  wordgame
//
//  Created by Jonatan Wulcan on 2012-12-27.
//  Copyright (c) 2012 Wulcan Consulting. All rights reserved.
//

#import "common.h"

#import "Level.h"
#import "Sprite.h"
#import "Tile.h"

int levelData[] = {
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,

    
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,4,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,4,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,4,1,1,1,1,1,1,1,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,
    
    
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
    2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,
};

int levelData2Sprite[] = {
    0,
    SPRITE_FLOOR,
    SPRITE_WALL_LEFT,
    SPRITE_WALL_RIGHT,
    SPRITE_FLOOR_LEFT,
    SPRITE_FLOOR_RIGHT,
};

int levelData2Tile[] = {
    0,
    TILE_FLOOR,
    TILE_WALL_LEFT,
    TILE_WALL_RIGHT,
    TILE_FLOOR,
    TILE_FLOOR,
};

@implementation Level

- (id) initWithLevelNumber:(int) levelNumber {
    self = [super init];
    return self;
}

- (int) tileTypeWithX:(float) fx y:(float) fy {
    int x=floor(fx/32.0);
    int y=floor(fy/32.0);
    
    int ldx = x+10;
    int ldy = 55-y;
    if(ldx < 0 || ldx >= 20 || ldy < 0 || ldy >= 80) {
        return 0;
    }
    return levelData[ldy*20+ldx];
}

- (void) draw {
    for(Tile* tile in [self getNearbyTilesWithX:cameraX y:cameraY]) {
        [tile draw];
    }
}

- (NSArray*) getNearbyTilesWithX:(float) centerX y:(float) centerY {
    float cx = (((int)centerX)/32)*32-16;
    float cy = (((int)centerY)/32)*32-16;
    float w = 32*10;
    float h = 32*20;
    float minX = cx-w;
    float minY = cy-h;
    float maxX = cx+w;
    float maxY = cy+h;
    
    NSMutableArray* result = [NSMutableArray array];
    for(int x=minX;x<=maxX;x+=32) {
        for(int y=minY;y<=maxY;y+=32) {
            int type = [self tileTypeWithX:x y:y];
            if(type != 0) {
                Tile* tile = [[Tile alloc] initWithX:x y:y type:levelData2Tile[type] sprite:levelData2Sprite[type]];
                [result addObject:tile];
            }
        }
    }
    return result;
}
@end
